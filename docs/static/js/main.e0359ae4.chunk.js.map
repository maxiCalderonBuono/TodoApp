{"version":3,"sources":["components/todoReducer.js","components/TodoListItem.js","components/TodoList.js","components/TodoApp.js","hooks/useForm.js","index.js"],"names":["todoReducer","state","action","type","payload","filter","todo","id","map","done","TodoListItem","index","handleDelete","handleToggle","className","onClick","desc","TodoList","todos","i","init","JSON","parse","localStorage","getItem","TodoApp","useReducer","dispatch","initialState","useState","formData","setFormData","target","name","value","useForm","description","handleInputChange","reset","useEffect","setItem","stringify","length","todoId","onSubmit","e","preventDefault","trim","newTodo","Date","getTime","autoComplete","placeholder","onChange","ReactDOM","render","document","getElementById"],"mappings":"+LAAaA,EAAc,WAAwB,IAAvBC,EAAsB,uDAAf,GAAIC,EAAW,uCAC9C,OAAQA,EAAOC,MACX,IAAK,MACD,MAAM,GAAN,mBAAWF,GAAX,CAAkBC,EAAOE,UAC7B,IAAK,SACD,OAAOH,EAAMI,QAAO,SAAAC,GAAI,OAAGA,EAAKC,KAAOL,EAAOE,WAClD,IAAK,SACD,OAAOH,EAAMO,KAAI,SAAAF,GAAI,OAChBA,EAAKC,KAAKL,EAAOE,QAAlB,YAAC,eACIE,GADL,IACWG,MAAOH,EAAKG,OACtBH,KAGT,QACI,OAAOL,I,cCXNS,EAAe,SAAC,GAA+C,IAA9CJ,EAA6C,EAA7CA,KAAMK,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,aACrD,OACI,qBACAC,UAAU,+DADV,UAIA,oBAAGA,UAAS,UAAKR,EAAKG,MAAQ,YAAcM,QAAU,kBAAIF,EAAaP,EAAKC,KAA5E,UACGI,EAAQ,EADX,IACeL,EAAKU,QAEpB,wBAAQF,UAAU,wBAAwBC,QAAW,kBAAKH,EAAaN,EAAKC,KAA5E,sBALKD,EAAKC,KCHLU,EAAW,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,MAAOL,EAAgC,EAAhCA,aAAcD,EAAkB,EAAlBA,aAC3C,OACI,oBAAIE,UAAU,aAAd,SACCI,EAAMV,KAAI,SAACF,EAAMa,GAAP,OACX,cAAC,EAAD,CAEAb,KAAOA,EACPK,MAAQQ,EACRP,aAAeA,EACfC,aAAeA,GAJVP,EAAKC,UCHZa,EAAM,WACV,OAAOC,KAAKC,MAAMC,aAAaC,QAAQ,WAAa,IAGzCC,EAAU,WACrB,MAA0BC,qBAAW1B,EAAa,GAAIoB,GAAtD,mBAAOF,EAAP,KAAcS,EAAd,KAEA,ECVqB,WAAwB,IAAvBC,EAAsB,uDAAP,GACpC,EAAgCC,mBAASD,GAAzC,mBAAOE,EAAP,KAAiBC,EAAjB,KAcH,MAAO,CAACD,EARqB,SAAC,GAAc,IAAbE,EAAY,EAAZA,OAC3BD,EAAW,2BACJD,GADI,kBAENE,EAAOC,KAAOD,EAAOE,UAPb,WACVH,EAAYH,KDMiCO,CAAQ,CACxDC,YAAa,KADf,mBAAQA,EAAR,KAAQA,YAAcC,EAAtB,KAAyCC,EAAzC,KAKAC,qBAAW,WACThB,aAAaiB,QAAQ,QAASnB,KAAKoB,UAAUvB,MAC5C,CAACA,IA0CJ,OACE,qCACE,2CACW,sCAASA,EAAMwB,OAAf,UAEX,uBACA,sBAAK5B,UAAU,MAAf,UACE,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CAAUI,MAAOA,EAAOL,aAhBX,SAAC8B,GACpBhB,EAAU,CACRxB,KAAM,SACNC,QAASuC,KAagD/B,aA1B1C,SAAC+B,GAOlBhB,EALe,CACbxB,KAAM,SACNC,QAASuC,SAwBP,sBAAK7B,UAAU,QAAf,UACE,0CACA,uBACA,uBAAM8B,SArDO,SAACC,GAGpB,GAFAA,EAAEC,mBAEEV,EAAYW,OAAOL,QAAU,GAAjC,CAIA,IAAMM,EAAU,CACdzC,IAAI,IAAI0C,MAAOC,UACflC,KAAMoB,EACN3B,MAAM,GAQRkB,EALe,CACbxB,KAAM,MACNC,QAAS4C,IAIXV,MAkCM,UACE,uBACEnC,KAAK,OACLW,UAAU,eACVmB,KAAK,cACLkB,aAAa,MACbC,YAAY,YACZlB,MAAQE,EACRiB,SAAUhB,IAGZ,wBAAQlC,KAAK,SAASW,UAAU,8BAAhC,8BEjFZwC,IAASC,OAEP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e0359ae4.chunk.js","sourcesContent":["export const todoReducer = (state= [], action) => {\r\n    switch (action.type) {\r\n        case 'add':\r\n            return [...state, action.payload]\r\n        case 'delete':\r\n            return state.filter(todo=> todo.id !== action.payload)\r\n        case 'toggle':\r\n            return state.map(todo=>\r\n                (todo.id===action.payload) ?\r\n                 {...todo, done: !todo.done}:\r\n                 todo\r\n                )\r\n              \r\n        default:\r\n            return state;\r\n    }\r\n\r\n}","import React from 'react'\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const TodoListItem = ({todo, index, handleDelete, handleToggle}) => {\r\n    return (\r\n        <li\r\n        className=\"list-group-item list-group-item-action list-group-item-light\"\r\n        key={todo.id}\r\n      >\r\n        <p className={`${todo.done && 'complete'}`} onClick= {()=>handleToggle(todo.id)}>\r\n          {index + 1}.{todo.desc}\r\n        </p>\r\n        <button className=\"btn btn-danger btn-sm\" onClick = {()=> handleDelete(todo.id)}>Remove</button>\r\n      </li>\r\n    )\r\n}\r\n\r\nTodoListItem.propTypes = {\r\n    handleDelete: PropTypes.func.isRequired,\r\n    handleToggle: PropTypes.func.isRequired,\r\n    todo: PropTypes.object.isRequired,\r\n    index: PropTypes.number.isRequired\r\n}\r\n\r\n","import React from 'react'\r\nimport { TodoListItem } from './TodoListItem'\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const TodoList = ({todos, handleToggle, handleDelete}) => {\r\n    return (\r\n        <ul className=\"list-group\">\r\n        {todos.map((todo, i) => (\r\n        <TodoListItem \r\n        key={todo.id}\r\n        todo= {todo} \r\n        index= {i} \r\n        handleDelete= {handleDelete} \r\n        handleToggle= {handleToggle}/>\r\n        ))}\r\n      </ul>\r\n    )\r\n}\r\n\r\nTodoList.propTypes = {\r\n    handleDelete: PropTypes.func.isRequired,\r\n    handleToggle: PropTypes.func.isRequired,\r\n    todos: PropTypes.array.isRequired,\r\n    \r\n}\r\n","import React, { useEffect, useReducer } from \"react\";\r\nimport \"./todo.css\";\r\nimport { todoReducer } from \"./todoReducer\";\r\nimport { useForm } from \"../hooks/useForm\";\r\nimport { TodoList } from \"./TodoList\";\r\n\r\nconst init =() => {\r\n  return JSON.parse(localStorage.getItem('todos')) || [] ;\r\n}\r\n\r\nexport const TodoApp = () => {\r\n  const [todos, dispatch] = useReducer(todoReducer, [], init);\r\n\r\n  const [{description}, handleInputChange, reset] = useForm({\r\n    description: \"\",\r\n  });\r\n\r\n\r\n  useEffect (()=>{\r\n    localStorage.setItem('todos', JSON.stringify(todos))\r\n  }, [todos])\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (description.trim().length <= 1) {\r\n      return;\r\n    }\r\n\r\n    const newTodo = {\r\n      id: new Date().getTime(),\r\n      desc: description,\r\n      done: false,\r\n    };\r\n\r\n    const action = {\r\n      type: \"add\",\r\n      payload: newTodo,\r\n    };\r\n\r\n    dispatch(action);\r\n    reset();\r\n  };\r\n\r\n const handleDelete= (todoId) => {\r\n\r\n    const action = {\r\n      type: \"delete\",\r\n      payload: todoId,\r\n    };\r\n\r\n    dispatch(action);\r\n  } \r\n\r\n  const handleToggle = (todoId) => {\r\n    dispatch ({\r\n      type: 'toggle',\r\n      payload: todoId\r\n    })\r\n  }\r\n \r\n \r\n  return (\r\n    <>\r\n      <h1>\r\n        ToDo App <small>({todos.length})</small>\r\n      </h1>\r\n      <hr />\r\n      <div className=\"row\">\r\n        <div className=\"col-7\">\r\n          <TodoList todos={todos} handleToggle= {handleToggle} handleDelete= {handleDelete}/>\r\n        </div>\r\n        <div className=\"col-5\">\r\n          <h4>Add Task</h4>\r\n          <hr />\r\n          <form onSubmit={handleSubmit}>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"description\"\r\n              autoComplete=\"off\"\r\n              placeholder=\"Your task\"\r\n              value= {description}\r\n              onChange={handleInputChange}\r\n            />\r\n\r\n            <button type=\"submit\" className=\"btn btn-success mt-2 col-12\">\r\n              Add\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useState } from \"react\"\r\n\r\n\r\nexport const useForm = (initialState = {}) => {\r\n   const [formData, setFormData] = useState(initialState)\r\n\r\n   const reset = ()=> {\r\n       setFormData(initialState);\r\n   }\r\n\r\n   const handleInputChange = ({target}) => {  \r\n    setFormData ({\r\n        ...formData,\r\n        [target.name]: target.value,\r\n    })\r\n    \r\n}\r\n\r\nreturn [formData, handleInputChange, reset]\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport {TodoApp} from './components/TodoApp'\n\nReactDOM.render(\n\n  <TodoApp />,\n  document.getElementById(\"root\")\n);\n \n\n"],"sourceRoot":""}